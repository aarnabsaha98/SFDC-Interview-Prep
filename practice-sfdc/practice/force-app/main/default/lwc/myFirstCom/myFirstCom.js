
// 𝙇𝙞𝙜𝙝𝙩𝙣𝙞𝙣𝙜𝙀𝙡𝙚𝙢𝙚𝙣𝙩 𝙞𝙨 𝙖 𝙘𝙪𝙨𝙩𝙤𝙢 𝙬𝙧𝙖𝙥𝙥𝙚𝙧 𝙤𝙛 𝙩𝙝𝙚 𝙨𝙩𝙖𝙣𝙙𝙖𝙧𝙙 𝙃𝙏𝙈𝙇 𝙚𝙡𝙚𝙢𝙚𝙣𝙩.
// 𝙀𝙭𝙩𝙚𝙣𝙙 𝙇𝙞𝙜𝙝𝙩𝙣𝙞𝙣𝙜𝙀𝙡𝙚𝙢𝙚𝙣𝙩 𝙩𝙤 𝙘𝙧𝙚𝙖𝙩𝙚 𝙖 𝙅𝙖𝙫𝙖𝙎𝙘𝙧𝙞𝙥𝙩 𝙘𝙡𝙖𝙨𝙨 𝙛𝙤𝙧 𝙖 𝙇𝙞𝙜𝙝𝙩𝙣𝙞𝙣𝙜 𝙬𝙚𝙗 𝙘𝙤𝙢𝙥𝙤𝙣𝙚𝙣𝙩. 
// 𝙔𝙤𝙪 𝙘𝙖𝙣’𝙩 𝙚𝙭𝙩𝙚𝙣𝙙 𝙖𝙣𝙮 𝙤𝙩𝙝𝙚𝙧 𝙘𝙡𝙖𝙨𝙨 𝙩𝙤 𝙘𝙧𝙚𝙖𝙩𝙚 𝙖 𝙇𝙞𝙜𝙝𝙩𝙣𝙞𝙣𝙜 𝙬𝙚𝙗 𝙘𝙤𝙢𝙥𝙤𝙣𝙚𝙣𝙩.
import { LightningElement } from 'lwc';

// 𝗧𝗵𝗲 𝗲͟𝘅͟𝗽͟𝗼͟𝗿͟𝘁 𝗱͟𝗲͟𝗳͟𝗮͟𝘂͟𝗹͟𝘁 𝗸͟𝗲͟𝘆͟𝘄͟𝗼͟𝗿͟𝗱͟𝘀 𝗲𝘅𝗽𝗼𝗿𝘁 𝗮 𝗠𝘆𝗖𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁 𝗰𝗹𝗮𝘀𝘀 𝗳𝗼𝗿 𝗼𝘁𝗵𝗲𝗿 𝗰𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁𝘀 𝘁𝗼 𝘂𝘀𝗲
export default class MyFirstCom extends LightningElement {

    myFunction(e) {
        console.log('forth');
        console.log('e.target :' + e.target);
        console.log('e.currentTarget :' + e.currentTarget);
        console.log('e.composedPath :' + e.composedPath);

        e.stopPropagation();
    }
    //     𝙏͟𝙝͟𝙚 𝙥͟𝙧͟𝙚͟𝙫͟𝙚͟𝙣͟𝙩͟𝘿͟𝙚͟𝙛͟𝙖͟𝙪͟𝙡͟𝙩 𝙢͟𝙚͟𝙩͟𝙝͟𝙤͟𝙙 𝙥͟𝙧͟𝙚͟𝙫͟𝙚͟𝙣͟𝙩͟𝙨 𝘁𝗵𝗲 𝗱𝗲𝗳𝗮𝘂𝗹𝘁 𝗯𝗲𝗵𝗮𝘃𝗶𝗼𝗿 𝗮𝘀𝘀𝗼𝗰𝗶𝗮𝘁𝗲𝗱 𝘄𝗶𝘁𝗵 𝗮𝗻 𝗲𝘃𝗲𝗻𝘁.
    // 𝗜𝗻 𝘆𝗼𝘂𝗿 𝗰𝗮𝘀𝗲, 𝗰𝗹𝗶𝗰𝗸𝗶𝗻𝗴 𝘁𝗵𝗲 𝗯𝘂𝘁𝘁𝗼𝗻 (<𝗯𝘂𝘁𝘁𝗼𝗻 𝗼𝗻𝗰𝗹𝗶𝗰𝗸={𝗺𝘆𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻}>𝗰𝗹𝗶𝗰𝗸 𝗺𝗲</𝗯𝘂𝘁𝘁𝗼𝗻>) 𝘄𝗼𝘂𝗹𝗱 𝗻𝗼𝗿𝗺𝗮𝗹𝗹𝘆 𝘀𝘂𝗯𝗺𝗶𝘁 𝘁𝗵𝗲 𝗳𝗼𝗿𝗺 (𝗶𝗳 𝗶𝘁 𝘄𝗲𝗿𝗲 𝗶𝗻𝘀𝗶𝗱𝗲 𝗮 𝗳𝗼𝗿𝗺).
    // 𝗬𝗼𝘂'𝘃𝗲 𝗶𝗻𝗰𝗹𝘂𝗱𝗲𝗱 𝗲.𝗽𝗿𝗲𝘃𝗲𝗻𝘁𝗗𝗲𝗳𝗮𝘂𝗹𝘁() 𝘄𝗶𝘁𝗵𝗶𝗻 𝗺𝘆𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻. 𝗧𝗵𝗶𝘀 𝗽𝗿𝗲𝘃𝗲𝗻𝘁𝘀 𝘁𝗵𝗲 𝗱𝗲𝗳𝗮𝘂𝗹𝘁 𝗳𝗼𝗿𝗺 𝘀𝘂𝗯𝗺𝗶𝘀𝘀𝗶𝗼𝗻 𝗯𝗲𝗵𝗮𝘃𝗶𝗼𝗿 𝘄𝗵𝗲𝗻 𝘁𝗵𝗲 𝗯𝘂𝘁𝘁𝗼𝗻 𝗶𝘀 𝗰𝗹𝗶𝗰𝗸𝗲𝗱.
    //     𝙏͟𝙝͟𝙚 𝙨͟𝙩͟𝙤͟𝙥͟𝙋͟𝙧͟𝙤͟𝙥͟𝙖͟𝙜͟𝙖͟𝙩͟𝙞͟𝙤͟𝙣 𝙢͟𝙚͟𝙩͟𝙝͟𝙤͟𝙙 𝙨͟𝙩͟𝙤͟𝙥͟𝙨 𝘁𝗵𝗲 𝗲𝘃𝗲𝗻𝘁 𝗳𝗿𝗼𝗺 𝗯𝘂𝗯𝗯𝗹𝗶𝗻𝗴 𝘂𝗽 𝘁𝗵𝗲 𝗗𝗢𝗠 𝘁𝗿𝗲𝗲 𝗳𝘂𝗿𝘁𝗵𝗲𝗿.
    // 𝗜𝗳 𝘆𝗼𝘂 𝘂𝘀𝗲 𝘀𝘁𝗼𝗽𝗣𝗿𝗼𝗽𝗮𝗴𝗮𝘁𝗶𝗼𝗻 𝘄𝗶𝘁𝗵𝗶𝗻 𝗮 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝗹𝗶𝗸𝗲 𝗺𝘆𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝟮 𝗼𝗿 𝗺𝘆𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝟯, 
    //𝗰𝗹𝗶𝗰𝗸𝗶𝗻𝗴 𝘁𝗵𝗲 𝗰𝗼𝗿𝗿𝗲𝘀𝗽𝗼𝗻𝗱𝗶𝗻𝗴 𝗱𝗶𝘃 𝘄𝗶𝗹𝗹 𝗼𝗻𝗹𝘆 𝘁𝗿𝗶𝗴𝗴𝗲𝗿 𝘁𝗵𝗮𝘁 𝘀𝗽𝗲𝗰𝗶𝗳𝗶𝗰 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝗮𝗻𝗱 𝗽𝗿𝗲𝘃𝗲𝗻𝘁 𝘁𝗵𝗲 𝗲𝘃𝗲𝗻𝘁 𝗳𝗿𝗼𝗺 𝗯𝘂𝗯𝗯𝗹𝗶𝗻𝗴 𝘂𝗽 𝘁𝗼 𝗺𝘆𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝟭.

    myFunction1(e) { console.log('first');  }
    myFunction2(e) { console.log('second'); e.stopPropagation();}
    myFunction3(e) { console.log('third');       console.log('e.target :' + e.target);
    console.log('e.currentTarget :' + e.currentTarget);
    console.log('e.composedPath :' + e.composedPath);}

}